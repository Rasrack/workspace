(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes (quote (tango-dark)))
 '(global-display-line-numbers-mode t)
 '(inhibit-startup-screen t)
 '(package-selected-packages
   (quote
    (bazel auto-package-update bazel-mode fzf use-package flycheck-pycheckers flycheck-mypy yaml-mode undo-tree markdown-mode groovy-mode go-mode flycheck-clangcheck company-irony clang-format)))
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(let ((default-directory  "~/.emacs.d"))
  (normal-top-level-add-subdirs-to-load-path))

;; Prevent undo tree files from polluting your git repo
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))

(server-start)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(use-package flycheck-mypy
  :ensure t)

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; Global
(setq-default indent-tabs-mode nil
              tab-width 4)

(use-package ido
  :ensure t
  :init (ido-mode t))

(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(use-package visual-regexp-steroids
  :defer 4
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("M-%"   . vr/query-replace)
         ("C-c m" . vr/mc-mark))
  ;;         ("C-r"   . vr/isearch-backward) ;; C-M-r
  ;;         ("C-s"   . vr/isearch-forward)) ;; C-M-s
  :config
  (use-package visual-regexp
    :ensure t
    :config
    (setq vr/match-separator-use-custom-face t)))

(use-package bazel
  :ensure t
  :mode (("\\.bzl\\'" . bazel-starlark-mode)
         ("\\.bazel\\'" . bazel-build-mode)
         ("BUILD\\'" . bazel-build-mode)
         ("WORKSPACE\\'" . bazel-workspace-mode)
         ("bazelrc\\'" . bazelrc-mode)))

(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-at-time "03:00"))

(use-package fzf
  :ensure t
  :bind (("C-x t" . fzf)))

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
